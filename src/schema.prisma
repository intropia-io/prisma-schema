generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model Admin {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  color         String          @default("#060a1b")
  role          AdminRole       @default(USER) //deprecated
  roles         AdminRole[]     @default([USER])
  events        Events[]
  Logs          Logs[]
  organizations Organizations[]
  quests        Quests[]
}

model Dynasty {
  id              String            @id @default(cuid())
  name            String
  avatar          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  description     String?
  quests          Quests[]
  User            User[]
  botSubscription BotSubscription[]
}

model Token {
  id           String   @id @default(cuid())
  name         String
  avatar       String
  events       Events[]
  TokenDefault Quests[] @relation("TokenDefault")
  TokenReward  Quests[] @relation("TokenReward")
}

model Organizations {
  id              String       @id @default(cuid())
  name            String
  description     String?
  typeId          String?
  avatar          String
  cover           String?
  color           String
  market          String?
  treasury        String?
  linkWebsite     String?
  linkTelegram    String?
  linkTwitter     String?
  linkReddit      String?
  linkDiscord     String?
  linkMedium      String?
  dateFounded     String?
  verified        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userId          String?      @default(" ")
  textBlocks      String?
  contractAddress String?
  clientsId       String[]
  state           EntityStates @default(DRAFT)
  type            Type?        @relation(fields: [typeId], references: [id], onDelete: SetNull)
  user            Admin?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  events          Events[]
  quests          Quests[]
  tags            Tags[]
}

model Quests {
  id                     String                   @id @default(cuid())
  title                  String
  description            String?
  typeId                 String?
  salaryRange            String?
  reffReward             Float?
  linkApply              String?
  organizationId         String
  tokenId                String?
  dynastyId              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  userId                 String?                  @default(" ")
  textBlocks             String?
  rewardFrom             Float?
  rewardTo               Float?
  reffLink               String? //deprecated
  tokenRewardId          String?
  state                  EntityStates             @default(DRAFT)
  dynasty                Dynasty?                 @relation(fields: [dynastyId], references: [id], onDelete: SetNull)
  organization           Organizations            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  token                  Token?                   @relation("TokenDefault", fields: [tokenId], references: [id], onDelete: Cascade)
  tokenReward            Token?                   @relation("TokenReward", fields: [tokenRewardId], references: [id], onDelete: Cascade)
  type                   Type?                    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  user                   Admin?                   @relation(fields: [userId], references: [id], onDelete: SetNull)
  tags                   Tags[]
  QuestLinksStatusErrors QuestLinksStatusErrors[]
  apply                  Apply[]
  refLink                RefLink[]

  @@unique([title, organizationId])
}

model QuestLinksStatusErrors {
  id            String       @id @default(cuid())
  questId       String
  link          String
  status        String
  createdAt     DateTime     @default(now())
  quest         Quests       @relation(fields: [questId], references: [id], onDelete: Cascade)
  scheduleLog   ScheduleLog? @relation(fields: [scheduleLogId], references: [id], onDelete: Cascade)
  scheduleLogId String?
}

model ScheduleLog {
  id        String                   @id @default(cuid())
  name      String
  logs      QuestLinksStatusErrors[]
  createdAt DateTime                 @default(now())
}

model Events {
  id             String        @id @default(cuid())
  title          String
  description    String?
  avatar         String
  typeId         String?
  cost           String?
  priceFrom      Float?
  startDate      DateTime
  endDate        DateTime?
  geo            String?
  linkApply      String
  linkWebsite    String?
  linkTelegram   String?
  linkTwitter    String?
  linkReddit     String?
  linkDiscord    String?
  linkMedium     String?
  organizationId String
  isSoldOut      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String?       @default(" ")
  textBlocks     String
  priceTo        Float?
  tokenId        String?
  state          EntityStates  @default(DRAFT)
  organization   Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  token          Token?        @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  type           Type?         @relation(fields: [typeId], references: [id], onDelete: SetNull)
  user           Admin?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  tags           Tags[]
}

model Tags {
  id            String          @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  events        Events[]
  organizations Organizations[]
  quests        Quests[]
}

model Type {
  id                   String            @id @default(cuid())
  name                 String
  description          String?
  color                String?
  discordChannelId     String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  categoryType         CategoryType      @default(INSTITUTE)
  customRules          CustomRules[]
  events               Events[]
  organization         Organizations[]
  quest                Quests[]
  botSubscriptionQuest BotSubscription[] @relation("questTypes")
  botSubscriptionEvent BotSubscription[] @relation("eventTypes")
}

model Logs {
  id          String          @id @default(cuid())
  description String?
  title       String          @default("")
  itemId      String
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  type        LogEntity       @default(UNDEFINED)
  action      LogEntityAction @default(UNDEFINED)
  user        Admin           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Suggest {
  id        String   @id @default(cuid())
  type      String
  content   Json
  page      String?
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id           String     @id @default(cuid())
  type         String
  description  String
  reportTypeId String
  ReportType   ReportType @relation(fields: [reportTypeId], references: [id])
}

model ReportType {
  id     String   @id @default(cuid())
  name   String
  Report Report[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String             @id @default(cuid())
  refUserId         String?
  name              String?
  username          String?            @unique
  email             String?            @unique
  contactEmail      String?
  emailVerified     DateTime?
  image             String?
  firstName         String?
  lastName          String?
  description       String?
  resumeLink        String?
  twitterLink       String?
  githubLink        String?
  telegram          String?
  dynasty           Dynasty[]
  nonce             String?
  publicAddress     String?            @unique
  accounts          Account[]
  userAggrigation   UserAggrigation[]
  adminUser         RefAccount[]       @relation("adminUser")
  defaultRefAccount RefAccount?        @relation("defaultRefAccount", fields: [refAccountId], references: [id])
  refAccountId      String?
  apply             Apply[]
  refLink           RefLink[]
  refAccount        RefAccount[]
  experience        RewardExperience[]
  firstSignIn       Boolean            @default(false)
  optIn             Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
}

model UserAggrigation {
  id            String   @id @default(cuid())
  name          String?
  user          User     @relation(fields: [id], references: [id], onDelete: Cascade)
  email         String?  @unique
  image         String?
  firstName     String?
  lastName      String?
  description   String?
  resumeLink    String?
  twitterLink   String?
  githubLink    String?
  telegram      String?
  publicAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model RefAccount {
  id                String         @id @default(cuid())
  adminUser         User           @relation("adminUser", fields: [adminUserId], references: [id], onDelete: Cascade)
  adminUserId       String
  avatar            String?
  title             String?
  description       String?
  users             User[]
  defaultRefAccount User[]         @relation("defaultRefAccount")
  refLink           RefLink[]
  type              RefAccountType @default(PERSONAL)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model RefLink {
  id           String        @id @default(cuid())
  shortId      String        @unique
  views        RefLinkView[]
  quests       Quests        @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId      String
  refUserApply Apply[]
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  refAccount   RefAccount    @relation(fields: [refAccountId], references: [id], onDelete: Cascade)
  refAccountId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model RefLinkView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refLink   RefLink? @relation(fields: [refLinkId], references: [id], onDelete: Cascade)
  refLinkId String
}

model Apply {
  id            String               @id @default(cuid())
  link          RefLink?             @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId        String?
  quest         Quests?              @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId       String?
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  cv            ApplyCV              @relation(fields: [cvId], references: [id])
  cvId          String
  contactEmail  String               @default("")
  status        ApplyStatus?         @default(NEW) //deprecated
  historyStatus ApplyStatusHistory[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@unique([questId, userId])
}

model ApplyStatusHistory {
  id        String             @id @default(cuid())
  apply     Apply              @relation(fields: [applyId], references: [id], onDelete: Cascade)
  applyId   String
  status    ApplyHistoryStatus
  createdAt DateTime           @default(now())
}

model ApplyCV {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apply     Apply[]
}

model ScheduleTask {
  id         String               @id @default(cuid())
  name       String
  entityType ScheduleCategoryType
  entityId   String
  taskType   ScheduleTaskType
  status     ScheduleTaskStatus   @default(NEW)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BotSubscription {
  id              String           @id @default(cuid())
  userId          String
  firstName       String?
  lastName        String?
  username        String?
  dynasties       Dynasty[]
  questTypes      Type[]           @relation("questTypes")
  eventTypes      Type[]           @relation("eventTypes")
  reffProgram     ReffProgram?
  updateFrequency UpdateFrequency?
  bot             botType          @default(tr3butor)
  status          SubsStatus       @default(NEW)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, bot])
}

model ShortLink {
  id         String       @id @default(cuid())
  entityId   String
  entityType ShortUrlType @default(INSTITUTE)
  shortUrl   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model RestUser {
  id    String       @id @default(cuid())
  name  String
  token String
  type  RestUserType @default(OUTHOUSE)
}

model WhitelistSubscribes {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model RewardExperience {
  id        String               @id @default(cuid())
  type      RewardExperienceType
  forWhatId String
  value     Int
  user      User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model RewardExperiencePrice {
  id        String               @id @default(cuid())
  type      RewardExperienceType @unique
  value     Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum CategoryType {
  INSTITUTE
  EVENT
  QUEST
}

enum ScheduleCategoryType {
  INSTITUTE
  EVENT
  QUEST
  USER
}

enum ShortUrlType {
  INSTITUTE
  EVENT
  QUEST
  PROFILE
}

enum botType {
  tr3butor
  intropia
}

enum CustomRules {
  NO_REWARD
  HIDE_FROM_EXPLORER
}

enum EntityStates {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LogEntity {
  UNDEFINED
  INSTITUTE
  QUEST
  EVENT
  DYNASTY
  TOKEN
  TAG
  TYPE
  CATEGORY
  SUGGEST
  IMAGE
  REPORT
  REPORT_TYPE
  ERROR
}

enum LogEntityAction {
  UNDEFINED
  CREATE
  UPDATE
  ARCHIVE
  PUBLISH
  DELETE
}

enum AdminRole {
  ADMIN
  SUPEROLEG
  HR
  CONTENT
  MANAGER
  USER
  DEMO
}

enum ReffProgram {
  SUBSCRIBED
  UNSUBSCRIBED
}

enum UpdateFrequency {
  WEEKLY
  REALTIME
}

enum SubsStatus {
  NEW
  SUBSCRIBED
  UNSUBSCRIBED
  DELETED
}

enum RestUserType {
  INHOUSE
  OUTHOUSE
}

enum ScheduleTaskType {
  INFORM_BOT_REALTIME
  INFORM_BOT_HOURLY
  INFORM_BOT_WEEKLY
}

enum ScheduleTaskStatus {
  NEW
  COMPLETE
}

enum RefAccountType {
  PERSONAL
  COMMUNITY
}

enum ApplyStatus {
  NEW
  VERIFIED
  INVITE
  SENT_OFFER
  GET_OFFER
  DECLINED_OFFER
  TEST_PERIOD
  APPROVED
  DECLINED
}

enum ApplyHistoryStatus {
  NEW
  REQUEST_INFO
  VERIFIED
  DECLINED
  DECLINED_CLIENT
  INTERVIEW
  SENT_OFFER
  DECLINED_OFFER
  TEST_PERIOD
  APPROVED
  FIRED
  GET_OFFER
}

enum RewardExperienceType {
  QUEST_APPLY
  REF_QUEST_APPLY
}
